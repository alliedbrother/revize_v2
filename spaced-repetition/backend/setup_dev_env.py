#!/usr/bin/env python3
"""
Script to set up development environment for the spaced repetition backend.
Run this script to create a .env file with the correct development settings.
"""

import os
from pathlib import Path

# Get the directory where this script is located
SCRIPT_DIR = Path(__file__).resolve().parent
ENV_FILE = SCRIPT_DIR / '.env'

# Development environment variables
DEV_ENV_VARS = {
    'SECRET_KEY': 'dev-secret-key-not-for-production-change-in-prod',
    'DEBUG': 'True',
    'ALLOWED_HOSTS': 'localhost,127.0.0.1',
    'USE_S3': 'FALSE',
    'CORS_ALLOWED_ORIGINS': 'http://localhost:5173,http://127.0.0.1:5173,http://localhost:3000',
    'GOOGLE_OAUTH2_CLIENT_ID': 'your-google-client-id',
    'GOOGLE_OAUTH2_CLIENT_SECRET': 'your-google-client-secret',
    'DJANGO_SETTINGS_MODULE': 'spaced_repetition.settings'
}

def create_env_file():
    """Create a .env file with development settings."""
    print("Creating .env file for development...")
    
    if ENV_FILE.exists():
        response = input(f".env file already exists at {ENV_FILE}. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("Keeping existing .env file.")
            return
    
    with open(ENV_FILE, 'w') as f:
        f.write("# Django Development Environment Variables\n")
        f.write("# Generated by setup_dev_env.py\n")
        f.write("# DO NOT commit this file to version control\n\n")
        
        for key, value in DEV_ENV_VARS.items():
            f.write(f"{key}={value}\n")
    
    print(f"✅ Development .env file created at {ENV_FILE}")
    print("\nImportant notes:")
    print("- This file contains development settings only")
    print("- DEBUG is set to True (no HTTPS redirect)")
    print("- CORS is configured for frontend on port 5173")
    print("- Add your actual Google OAuth credentials if needed")
    print("- DO NOT commit this file to version control")

def main():
    """Main function to set up development environment."""
    print("Setting up development environment for spaced repetition backend...")
    create_env_file()
    
    # Check if python-dotenv is installed
    try:
        import dotenv
        print("✅ python-dotenv is available")
    except ImportError:
        print("⚠️  python-dotenv is not installed. Installing...")
        os.system("pip install python-dotenv")
        print("✅ python-dotenv installed")
    
    print("\nNext steps:")
    print("1. Review the .env file and update Google OAuth credentials if needed")
    print("2. Run: python manage.py runserver")
    print("3. Your backend should now accept HTTP requests without HTTPS redirect")

if __name__ == "__main__":
    main() 